Criar o projeto:
Jakarta EE + RestFul.
JAX-RS nos resources.

Projeto criado automaticamente (intelliJ):
- HelloApplication: classe principal do projeto (starta a aplicação). Pode alterar para "NomeDoProjetoApplication".
- Possui uma anotação @ApplicationPath, determinando o Path principal. Todos os paths da aplicação irão passar pela URL.


- HelloResource: classe que possui a função de controller. Pode ser renomeada para AutorController.
- @Path determina o caminho deste recurso. Alterar para o plural do recurso (ex: "/autores").
- Possui um @GET, utilizado à nível de método (método GET no banco).
- Possui um @Produces que informa o tipo de dado esperado no retorno. Utilizar sempre: MediaType.APPLICATION_JSON (do pacote import jakarta.ws.rs.core.MediaType);


Suponhamos que a aplicação seja sobre um CRUD de autores;

Deploy da aplicação:
- Vai abrir: http://localhost:8080/exemplo_rest-1.0-SNAPSHOT/
- Posso inserir "api/autores" para informar o caminho do recurso à ser acessado.
- Final: http://localhost:8080/exemplo_rest-1.0-SNAPSHOT/api/autores.
- Essa URL também será a que utilizaremos no Postman.


No navegador:
- Botão direito -> Inspecionar a página -> Network: para visualizar detalhes da requisição.


No projeto:
- Criar classe 'domain';
- Criar o Autor;
- Atributos, getters, setters, construtores (o de sempre).

- O construtor do Autor, recebe um 'DTO' de cadastro (ex: CadastroAutorDTO);
- O DTO por sua vez passa os atributos que serão recebidos no corpo do JSON enviado pelo POSTMAN.

- Criar camadas de comunicação: Repository, ConnectionFactory, Infrastructure, Service, etc.

- No AutorController


HelloResource:
- Mudar o tipo de retorno para Professor;
- Retornar um 'new Objeto(1, "Professor");
- Mudar parâmetro da anotação @Produce para: MediaType.APPLICATION_JSON
- Importar de: import jakarta.ws.rs.core.MediaType;
Classe final:
@Path("/hello-world")
public class HelloResource {
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Professor hello() {
        return new Professor(1, "Professor Anderson");
    }
}


- Após isso, alterar para retornar uma lista:
    @POST
    @Consumes(MediaType.APPLICATION_JSON) //Informa o tipo de formatação esperada (JSON).
    @Produces(MediaType.APPLICATION_JSON) //Informa o tipo que produz.
    public Autor insert(CadastroAutorDTO autorInsertRequestDTO) throws BusinessException { //Espera um DTO.
        AutorService autorService = new AutorService(); //Inicializa um service.
        Autor autor = new Autor(autorInsertRequestDTO); //Passa o DTO para o service.

        return autorService.inserir(autor); //Retorna o service.
    }

- Nesta classe (AutorController), apenas ocorrerá o a comunicação da camada de exposição com o Service.
- Lembrar de alterar a anotação JAX-R.
- Se necessário passar algum parâmetro: utilizar @Path("{id}") no header e no método: (@PathParam("{id}") int id).

    @GET
    @Path("{id}")
    @Produces(MediaType.APPLICATION_JSON)
    public Autor findById(@PathParam("id") Integer id) throws BusinessException {
        AutorService autorService = new AutorService();
        return new Autor();//autorService.buscarPorId(id);
    }

- Após isso, é necessário informar a URI de cada um dos métodos.
- Dois métodos? Inserir @() com a URI para cada um.

- No envio da requisição, informar "http://localhost:8080/exemplo_rest-1.0-SNAPSHOT/api/professores?id=1"
- Isso serve para passar os parâmetros esperados.
- Cuidado para não associar a palavra Query com banco de dados.



- Inserir uma anotação @Path({id}) no topo do método e declarar dentro do parâmetro do método:
- Ficará desta forma:
@GET
    @Path("{id}")
    @Produces(MediaType.APPLICATION_JSON)
    public Professor findById(@PathParam("id") Integer id) {
        return new Professor(id, "Anderson");
    }

- Com isso, o envio da requisição não precisa mais de "professores?id=1", agora, podemos tratar "professores/1"




- Criar o método de inserir utilizando @POST.
- Basta mudar o envio da requisição para acessar esse método, caso seja o único do diretório.
- Neste momento é necessário criar um construtor vazio.
--------------------------------------------------------------------------------------------------------------------
Criar uma classe DTO para representar a exibição das exceptions (ExceptionResponseDTO);


No controller mudar o retorno de Autor para Response.
Envolver tudo em um try/catch.
Transformar o retorno do try.
Capturar a Exception com o BusinessException e personalizar o retorno de acordo com o erro.

No Service, mudar a assinatura

Uso do erro:
400: Indica que a pessoa que consome a API tem condições de arrumar o erro.
500: Problemas internos que não devem ser retornados ao usuário.

Update:
200: ok.
404: not found.
400: erro de validação
500: erro interno.


Delete:
404: not found.
204: tudo ok.
400: erro de validação.
500: erro interno.

FindById:
200: ok.
404: acessando recurso que nao existe
400: erro de validação
500: erro interno

Listagem:
200: ok
404: not found
500: erro interno.


Criação da tabela (exemplo):
CREATE TABLE autor(
    id serial primary key,
    nome varchar(200)
);

INSERT INTO autor(nome) VALUES('Rafael');

SELECT * FROM autor;
--------------------------------------------------------------------------------------------------------------------
O que é JAX-RS?
JAX-RS (Java API for RESTful Web Services) é uma especificação Java que facilita a criação de serviços web RESTful. Ela usa anotações para mapear métodos Java a requisições HTTP, permitindo construir APIs que seguem o estilo arquitetural REST. Com JAX-RS, você pode criar endpoints que respondem a métodos HTTP como GET, POST, PUT e DELETE, manipulando dados em formatos como JSON ou XML.


@GET
Para que serve: Indica que o método é usado para recuperar dados(Get = pegar).

@GET
@Path("/hello")
public String getHello() {
    return "Olá, mundo!";
}
Explicação: Ao acessar GET /hello, o método retorna a string "Olá, mundo!".






@Produces
Para que serve: Define o formato que o método retorna (JSON, XML ou texto).

@GET
@Path("/user")
@Produces(MediaType.APPLICATION_JSON)
public User getUser() {
    return new User("João", 30);
}
Explicação: O método retorna um objeto User em formato JSON.






@Path
Para que serve: Define o caminho (URL) do recurso para o método ou para a classe.

@Path("/users")
public class UserResource {
    @GET
    public String getUsers() {
        return "Lista de usuários";
    }
}
Explicação: O método responde a GET /users.






@PathParam
Para que serve: Extrai um parâmetro da URI e o passa como parâmetro no método.

@GET
@Path("/user/{id}")
public String getUserById(@PathParam("id") String id) {
    return "Usuário com ID: " + id;
}
Explicação: Uma requisição GET /user/123 retorna "Usuário com ID: 123".






@QueryParam
Para que serve: Extrai parâmetros da query string (ex.: ?nome=valor) da URL.

@GET
@Path("/search")
public String searchUser(@QueryParam("name") String name) {
    return "Buscando usuário: " + name;
}
Explicação: Uma requisição GET /search?name=João retorna "Buscando usuário: João".






@POST
Para que serve: Indica que o método é usado para criar recursos.

@POST
@Path("/user")
public String createUser(String userData) {
    return "Usuário criado: " + userData;
}
Explicação: Uma requisição POST /user com corpo cria um novo usuário.






@Consumes
Para que serve: Define o tipo de formato que o método aceita como entrada (JSON ou XML).

@POST
@Path("/user")
@Consumes(MediaType.APPLICATION_JSON)
public String createUser(User user) {
    return "Usuário criado: " + user.getName();
}
Explicação: O método aceita um objeto User em JSON no corpo da requisição.






@PUT
Para que serve: Indica que o método é usado para atualizar recursos (PUT = recolocar).

@PUT
@Path("/user/{id}")
public String updateUser(@PathParam("id") String id, String userData) {
    return "Usuário " + id + " atualizado: " + userData;
}
Explicação: Uma requisição PUT /user/123 atualiza o usuário com ID 123.






@DELETE
Para que serve: Indica que o método é usado para remover recursos.

@DELETE
@Path("/user/{id}")
public String deleteUser(@PathParam("id") String id) {
    return "Usuário " + id + " deletado";
}
Explicação: Uma requisição DELETE /user/123 remove o usuário com ID 123.

@ApplicationPath
Para que serve: Define o caminho base (prefixo) para todos os recursos da aplicação JAX-RS (URI principal).

@ApplicationPath("/api")
public class MyApplication extends Application {
}
Explicação: Todos os endpoints da aplicação serão acessados a partir de /api, como /api/users.



Resumo
@GET, @POST, @PUT e @DELETE definem o tipo de requisição, enquanto @Path, @PathParam e @QueryParam gerenciam os caminhos e parâmetros.
@Produces e @Consumes controlam os formatos de dados.
@ApplicationPath define o prefixo da aplicação.




POST (insert)
http://localhost:8080/unilivraria-rest-1.0-SNAPSHOT/api/autores
Informar o JSON no Body.
{
	"nome": X
}

DELETE
URL: http://localhost:8080/unilivraria-rest-1.0-SNAPSHOT/api/autores/34
Onde 34 é o ID.
Não há JSON uma vez que o método não consome nada e o id já é passado na URL.


GET
{
	"id": X
}


PUT (update)
{
	"id": X
	"nome": Y
}


